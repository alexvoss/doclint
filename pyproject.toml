# MIT License
#
# Copyright (c) 2023 Alexander Voss <alex@corealisation.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "doclint"
dynamic = ["version"]
description = 'a linter for your documentation'
readme = "README.md"
requires-python = ">=3.10"
license = { file = "LICENSE" }
keywords = ["documentation", "linter"]
authors = [
  { name = "Alex Voss", email = "alex@corealisation.com" },
]

dependencies = [
  # HTML parser, https://www.crummy.com/software/BeautifulSoup/
  "beautifulsoup4 >= 4.12.2, < 5",
  # NLP library, https://spacy.io/
  "spacy >= 3.7.2, < 4",
  # spellchecking library, https://pyenchant.github.io/pyenchant/
  "pyenchant >= 3.2.2, < 4",
  # HTTP client, https://urllib3.readthedocs.io
  "urllib3 >= 2.0.7, < 3",
  # Parsing XML files
  "lxml >= 4.9.3, < 5",
  # Rich text output on the console
  "rich >= 13.7.0, < 14"
]

classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]

[project.urls]
Documentation = "https://alexvoss.github.io/doclint"
Issues = "https://github.com/alexvoss/doclint/issues"
Source = "https://github.com/alexvoss/doclint"

[project.optional-dependencies]
documentation = [
  "mkdocs-material >= 9.4.10, < 10",
  "mkdocs-minify-plugin~=0.7",
  "mkdocs-redirects~=1.2",
  "mkdocs-rss-plugin~=1.6",
  "mkdocs-git-committers-plugin-2~=1.1",
  "mkdocs-git-revision-date-localized-plugin~=1.2",
  "mkdocstrings >= 0.24.0, < 1",
  "mkdocstrings-python >= 1.7.5, < 2"
]

[tool.hatch.version]
path = "src/doclint/__about__.py"

[tool.hatch.envs.default]
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
]
[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
  "- coverage combine",
  "coverage report",
]
cov = [
  "test-cov",
  "cov-report",
]

[[tool.hatch.envs.all.matrix]]
python = ["3.7", "3.8", "3.9", "3.10", "3.11"]

[tool.hatch.envs.lint]
detached = true
dependencies = [
  "black>=23.1.0",
  "mypy>=1.0.0",
  "ruff>=0.0.243",
]
[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/doclint tests}"
style = [
  "ruff {args:.}",
  "black --check --diff {args:.}",
]
fmt = [
  "black {args:.}",
  "ruff --fix {args:.}",
  "style",
]
all = [
  "style",
  "typing",
]

[tool.black]
target-version = ["py37"]
line-length = 120
skip-string-normalization = true

[tool.ruff]
target-version = "py37"
line-length = 120
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.isort]
known-first-party = ["doclint"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.coverage.run]
source_pkgs = ["doclint", "tests"]
branch = true
parallel = true
omit = [
  "src/doclint/__about__.py",
]

[tool.coverage.paths]
doclint = ["src/doclint", "*/doclint/src/doclint"]
tests = ["tests", "*/doclint/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]
